County Name == County,
dat_descriptive <- dat %>%
select(
"County Name" == "County",
"State",
"3/27/2020" == "most_recent"
) %>%
group_by(State) %>%
sort(most_recent, decreasing = TRUE)
dat_descriptive <- dat %>%
select(
"County Name" == "County",
"State",
"3/27/2020" == "most_recent"
)
dat_descriptive <- dat %>%
select(
"County Name" = "County",
"State",
"3/27/2020" = "most_recent"
)
dat_descriptive <- dat %>%
select(
"County Name",
"State",
"3/27/2020"
)
View(dat_descriptive)
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
sort(most_recent, decreasing = TRUE)
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state)
View(dat_descriptive)
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
sort(most_recent, decreasing = TRUE)
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
desc(most_recent)
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
desc("3/27/2020")
dat_descriptive <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent))
View(dat_descriptive)
total_before <- lapply(dat[, 4:69], FUN = sum)
View(total_before)
total_before <- lapply(dat[, 5:69], FUN = sum)
total_before <- tapply(dat[, 5:69], FUN = sum)
total_before <- lapply(dat[, 5:69], FUN = sum)
View(total_before)
total_confirmed_cases <- lapply(dat[, 5:70], FUN = sum)
head(dat, 5)
tail(dat, 5)
glimpse_dat <- glimpse(dat)
glimpse_dat
View(total_confirmed_cases)
total_confirmed_cases
total_confirmed_cases <- as.data.frame(total_confirmed_cases)
View(total_confirmed_cases)
View(total_confirmed_cases)
total_confirmed_cases <- t(as.matrix(total_confirmed_cases))
View(total_confirmed_cases)
View(total_confirmed_cases)
colnames(dat[, 5:70])
str(dat)
row.names(total_confirmed_cases) <- colnames(dat[, 5:70]))
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
View(total_confirmed_cases)
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
colnames(total_confirmed_cases) <- "total_confirmed_cases"
total_confirmed_cases <- as.data.frame(total_confirmed_cases)
total_confirmed_cases
dat_descriptive
if(!requireNamespace("dplyr"))
install.packages("dplyr", repos = "https://cloud.r-project.org")
if(!requireNamespace("data.table"))
install.packages("data.table", repos = "https://cloud.r-project.org")
if(!requireNamespace("here"))
install.packages("here", repos = "https://cloud.r-project.org")
require(data.table)
require(dplyr)
library(here)
# Data Name: covid_confirmed_usafacts_03272020.csv
# Path: data/raw/usa-facts/03-27-2020/
# Load -------------------------------------------------------------------------
here::here()
dat <- fread("data/raw/usa-facts/03-27-2020/covid_confirmed_usafacts_03272020.csv")
glimpse(dat) # Get an overview on the data
table(is.na(dat)) # Check if there are missing values
summary(dat[, 70]) # Review the distribution of confirmed cases as of 03-27-2020
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_cases <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_cases <- t(as.matrix(total_confirmed_cases))
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
View(total_confirmed_cases)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_cases <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_cases <- t(as.matrix(total_confirmed_cases))
View(total_confirmed_cases)
# Data Name: covid_confirmed_usafacts_03272020.csv
# Path: data/raw/usa-facts/03-27-2020/
# Load -------------------------------------------------------------------------
here::here()
dat <- fread("data/raw/usa-facts/03-27-2020/covid_confirmed_usafacts_03272020.csv")
glimpse(dat) # Get an overview on the data
table(is.na(dat)) # Check if there are missing values
summary(dat[, 70]) # Review the distribution of confirmed cases as of 03-27-2020
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_cases <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_cases <- t(as.matrix(as.data.frame(total_confirmed_cases)))
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
colnames(total_confirmed_cases) <- "total_confirmed_cases"
total_confirmed_cases <- as.data.frame(total_confirmed_cases)
# Queens County, NY has the highest confirmed cases as of 03-27-2020
dat$`County Name`[dat$`3/27/2020` == max(dat$`3/27/2020`)]
dat$State[dat$`3/27/2020` == max(dat$`3/27/2020`)]
# 1450 counties have zero confirmed case as of 03-27-2020
table(dat$`3/27/2020` == 0)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent))
if(!requireNamespace("dplyr"))
install.packages("dplyr", repos = "https://cloud.r-project.org")
if(!requireNamespace("data.table"))
install.packages("data.table", repos = "https://cloud.r-project.org")
if(!requireNamespace("here"))
install.packages("here", repos = "https://cloud.r-project.org")
require(data.table)
require(dplyr)
library(here)
glimpse_dat
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total = most_recent/total_confirmed_cases
)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total =
dat_most_recent$most_recent / total_confirmed_cases[, 2]
)
View(total_confirmed_cases)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total =
dat_most_recent$most_recent / total_confirmed_cases[, 1]
)
View(dat_most_recent)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total =
dat_most_recent$most_recent / total_confirmed_cases[., ]
)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total =
dat_most_recent$most_recent / total_confirmed_cases[1:nrow(total_confirmed_cases), ]
)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
summarise(total_confirmed_cases = sum(most_recent)) %>%
mutate(
percentage_of_total = most_recent \ total_confirmed_cases
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
summarise(total_confirmed_cases = sum(most_recent)) %>%
mutate(
percentage_of_total = most_recent / total_confirmed_cases
)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
summarise(total_confirmed_cases = sum(most_recent))
View(total_confirmed_cases)
View(dat_most_recent)
View(dat_most_recent)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent))
View(dat_most_recent)
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_cases[-1, ]
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_cases[nrow(total_confirmed_cases), ]
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_cases[nrow(total_confirmed_cases), ]
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total = most_recent / total_cases
)
dat_most_recent
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_cases[nrow(total_confirmed_cases), ]
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total = round(most_recent / total_cases, digits = 3)
)
dat_most_recent
if(!requireNamespace("dplyr"))
install.packages("dplyr", repos = "https://cloud.r-project.org")
if(!requireNamespace("data.table"))
install.packages("data.table", repos = "https://cloud.r-project.org")
if(!requireNamespace("here"))
install.packages("here", repos = "https://cloud.r-project.org")
if(!requireNamespace("ggplot2"))
install.packages("ggplot2", repos = "https://cloud.r-project.org")
require(data.table)
require(dplyr)
library(here)
require(ggplot2)
View(total_confirmed_cases)
View(total_confirmed_cases)
View(total_confirmed_cases)
hist(total_confirmed_cases)
plot(total_confirmed_cases)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_cases <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_cases <- t(as.matrix(as.data.frame(total_confirmed_cases)))
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
colnames(total_confirmed_cases) <- "total_confirmed_daily"
total_confirmed_cases <- as.data.frame(total_confirmed_cases)
total_confirmed_cases
ggplot(total_confirmed_cases, aes(x = total_confirmed_daily)) +
geom_freqpoly()
ggplot(total_confirmed_cases, aes(x = total_confirmed_daily)) +
geom_histogram()
View(total_confirmed_cases)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily$date <- colnames(dat[, 5:70])
row.names(total_confirmed_cases) <- colnames(dat[, 5:70])
View(total_confirmed_cases)
total_confirmed_daily$date <- colnames(dat[, 5:70])
View(total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
if(!requireNamespace("dplyr"))
install.packages("dplyr", repos = "https://cloud.r-project.org")
if(!requireNamespace("data.table"))
install.packages("data.table", repos = "https://cloud.r-project.org")
if(!requireNamespace("here"))
install.packages("here", repos = "https://cloud.r-project.org")
if(!requireNamespace("ggplot2"))
install.packages("ggplot2", repos = "https://cloud.r-project.org")
require(data.table)
require(dplyr)
library(here)
require(ggplot2)
# Data Name: covid_confirmed_usafacts_03272020.csv
# Path: data/raw/usa-facts/03-27-2020/
# Load -------------------------------------------------------------------------
here::here()
dat <- fread("data/raw/usa-facts/03-27-2020/covid_confirmed_usafacts_03272020.csv")
head(dat, 5)
tail(dat, 5)
table(is.na(dat)) # Check if there are missing values
summary(dat[, 70]) # Review the distribution of confirmed cases as of 03-27-2020
# Queens County, NY has the highest confirmed cases as of 03-27-2020
dat$`County Name`[dat$`3/27/2020` == max(dat$`3/27/2020`)]
dat$State[dat$`3/27/2020` == max(dat$`3/27/2020`)]
# 1450 counties have zero confirmed case as of 03-27-2020
table(dat$`3/27/2020` == 0)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
View(total_confirmed_daily)
total_confirmed_daily$date <- colnames(dat[, 5:70])
View(total_confirmed_daily)
total_confirmed_daily <- as.data.frame(t(as.matrix(as.data.frame(total_confirmed_daily))))
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- as.data.frame(t(as.matrix(as.data.frame(total_confirmed_daily))))
View(total_confirmed_daily)
total_confirmed_daily$date <- colnames(dat[, 5:70])
View(total_confirmed_daily)
row.names(total_confirmed_cases) <- NULL
row.names(total_confirmed_daily) <- NULL
View(total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- as.data.frame(t(as.matrix(as.data.frame(total_confirmed_daily))))
total_confirmed_daily$date <- colnames(dat[, 5:70])
row.names(total_confirmed_daily) <- NULL
colnames(total_confirmed_daily) <- c("total_confirmed", "date")
total_confirmed_daily
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = colnames(dat[, 5:70]),
total_confirmed = total_confirmed_daily)
View(total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = colnames(dat[, 5:70]),
total_confirmed = total_confirmed_daily)
row.names(total_confirmed_daily) <- NULL
total_confirmed_daily
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point()
View(total_confirmed_daily)
View(total_confirmed_daily)
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point() +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
View(total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = as.Date(colnames(dat[, 5:70])),
total_confirmed = total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = as.Date(as.numeric(colnames(dat[, 5:70]))),
total_confirmed = total_confirmed_daily)
# Create a table showing daily total confirmed cases, nation-wide
date <-
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = as.Date(colnames(dat[, 5:70], "%m/%d/%y")),
total_confirmed = total_confirmed_daily)
colnames(dat[, 5:70]
)
"0" + colnames(dat[, 5:70])
paste("0" + colnames(datp[, 5:70]))
paste("0" + colnames(dat[, 5:70]))
paste("0", colnames(dat[, 5:70]))
paste("0", colnames(dat[, 5:70]), sep = "")
# Create a table showing daily total confirmed cases, nation-wide
date <- as.Date(paste(colnames(dat[, 5:70], sep = ""), "%m/%d/%y"))
# Create a table showing daily total confirmed cases, nation-wide
date <- as.Date(paste("0", colnames(dat[, 5:70], sep = ""), "%m/%d/%y"))
# Create a table showing daily total confirmed cases, nation-wide
date <- as.Date(paste("0", colnames(dat[, 5:70]) , sep = ""), "%m/%d/%y")
date
# Create a table showing daily total confirmed cases, nation-wide
date <- as.Date(paste("0", colnames(dat[, 5:70]) , sep = ""), "%m/%d/%y")
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = date),
# Create a table showing daily total confirmed cases, nation-wide
date <- as.Date(paste("0", colnames(dat[, 5:70]) , sep = ""), "%m/%d/%y")
total_confirmed_daily <- lapply(dat[, 5:70], FUN = sum)
total_confirmed_daily <- t(as.matrix(as.data.frame(total_confirmed_daily)))
total_confirmed_daily <- data.frame(date = date,
total_confirmed = total_confirmed_daily)
row.names(total_confirmed_daily) <- NULL
total_confirmed_daily
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point() +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
ggplot(total_confirmed_daily, aes(x = date, y = total_confirmed)) +
geom_point()
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_daily[nrow(total_confirmed_daily), ]
total_cases
# Create a tidy datafile to include only
# county, state, and most recent confirmed cases.
total_cases <- total_confirmed_daily[nrow(total_confirmed_daily), 2]
dat_most_recent <- dat %>%
select(
"county" = "County Name",
"state" = "State",
"most_recent" = "3/27/2020"
) %>%
group_by(state) %>%
arrange(desc(most_recent)) %>%
mutate(
percentage_of_total = round(most_recent / total_cases, digits = 3)
)
dat_most_recent
